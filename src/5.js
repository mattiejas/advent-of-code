const input = [
  3,
  225,
  1,
  225,
  6,
  6,
  1100,
  1,
  238,
  225,
  104,
  0,
  1002,
  92,
  42,
  224,
  1001,
  224,
  -3444,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  101,
  4,
  224,
  224,
  1,
  224,
  223,
  223,
  1102,
  24,
  81,
  225,
  1101,
  89,
  36,
  224,
  101,
  -125,
  224,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  101,
  5,
  224,
  224,
  1,
  224,
  223,
  223,
  2,
  118,
  191,
  224,
  101,
  -880,
  224,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  1001,
  224,
  7,
  224,
  1,
  224,
  223,
  223,
  1102,
  68,
  94,
  225,
  1101,
  85,
  91,
  225,
  1102,
  91,
  82,
  225,
  1102,
  85,
  77,
  224,
  101,
  -6545,
  224,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  101,
  7,
  224,
  224,
  1,
  223,
  224,
  223,
  1101,
  84,
  20,
  225,
  102,
  41,
  36,
  224,
  101,
  -3321,
  224,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  101,
  7,
  224,
  224,
  1,
  223,
  224,
  223,
  1,
  188,
  88,
  224,
  101,
  -183,
  224,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  1001,
  224,
  7,
  224,
  1,
  224,
  223,
  223,
  1001,
  84,
  43,
  224,
  1001,
  224,
  -137,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  101,
  4,
  224,
  224,
  1,
  224,
  223,
  223,
  1102,
  71,
  92,
  225,
  1101,
  44,
  50,
  225,
  1102,
  29,
  47,
  225,
  101,
  7,
  195,
  224,
  101,
  -36,
  224,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  101,
  6,
  224,
  224,
  1,
  223,
  224,
  223,
  4,
  223,
  99,
  0,
  0,
  0,
  677,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1105,
  0,
  99999,
  1105,
  227,
  247,
  1105,
  1,
  99999,
  1005,
  227,
  99999,
  1005,
  0,
  256,
  1105,
  1,
  99999,
  1106,
  227,
  99999,
  1106,
  0,
  265,
  1105,
  1,
  99999,
  1006,
  0,
  99999,
  1006,
  227,
  274,
  1105,
  1,
  99999,
  1105,
  1,
  280,
  1105,
  1,
  99999,
  1,
  225,
  225,
  225,
  1101,
  294,
  0,
  0,
  105,
  1,
  0,
  1105,
  1,
  99999,
  1106,
  0,
  300,
  1105,
  1,
  99999,
  1,
  225,
  225,
  225,
  1101,
  314,
  0,
  0,
  106,
  0,
  0,
  1105,
  1,
  99999,
  107,
  677,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  329,
  1001,
  223,
  1,
  223,
  1108,
  226,
  677,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  344,
  101,
  1,
  223,
  223,
  1107,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  359,
  101,
  1,
  223,
  223,
  8,
  677,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  374,
  1001,
  223,
  1,
  223,
  1107,
  677,
  226,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  389,
  1001,
  223,
  1,
  223,
  1008,
  677,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  404,
  1001,
  223,
  1,
  223,
  108,
  677,
  677,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  419,
  1001,
  223,
  1,
  223,
  1107,
  226,
  677,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  434,
  101,
  1,
  223,
  223,
  1008,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  449,
  1001,
  223,
  1,
  223,
  107,
  226,
  226,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  464,
  1001,
  223,
  1,
  223,
  1007,
  677,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  479,
  1001,
  223,
  1,
  223,
  1108,
  226,
  226,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  494,
  1001,
  223,
  1,
  223,
  8,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  509,
  1001,
  223,
  1,
  223,
  7,
  226,
  677,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  524,
  101,
  1,
  223,
  223,
  1008,
  677,
  226,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  539,
  101,
  1,
  223,
  223,
  107,
  226,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  554,
  1001,
  223,
  1,
  223,
  1108,
  677,
  226,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  569,
  101,
  1,
  223,
  223,
  108,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  584,
  1001,
  223,
  1,
  223,
  7,
  677,
  226,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  599,
  1001,
  223,
  1,
  223,
  108,
  226,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  614,
  101,
  1,
  223,
  223,
  1007,
  677,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  629,
  101,
  1,
  223,
  223,
  7,
  677,
  677,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  644,
  101,
  1,
  223,
  223,
  1007,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  659,
  1001,
  223,
  1,
  223,
  8,
  226,
  677,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  674,
  1001,
  223,
  1,
  223,
  4,
  223,
  99,
  226,
];

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const get = (ops, position) => {
  const op = ops[position].toString().padStart(5, '0');
  return {
    code: Number(op.substring(3, 5)),
    mode1: Number(op[2]),
    mode2: Number(op[1]),
    mode3: Number(op[0]),
  };
};

const getValue = (ops, position, mode) =>
  mode ? ops[position] : ops[ops[position]];

const handleOp = (operations, position) => {
  const ops = [...operations];
  const op = get(ops, position);

  switch (Number(op.code)) {
    case 1: {
      const a = getValue(ops, position + 1, op.mode1);
      const b = getValue(ops, position + 2, op.mode2);
      ops[ops[position + 3]] = a + b;
      return handleOp(ops, position + 4);
    }
    case 2: {
      const a = getValue(ops, position + 1, op.mode1);
      const b = getValue(ops, position + 2, op.mode2);
      ops[ops[position + 3]] = a * b;
      return handleOp(ops, position + 4);
    }
    case 3: {
      rl.question('input: ', i => {
        ops[ops[position + 1]] = Number(i);
        rl.close();

        return handleOp(ops, position + 2);
      });
      break;
    }
    case 4: {
      console.log(getValue(ops, position + 1, op.mode1));
      return handleOp(ops, position + 2);
    }
    case 5: {
      const a = getValue(ops, position + 1, op.mode1);
      const b = getValue(ops, position + 2, op.mode2);
      return handleOp(ops, a !== 0 ? b : position + 3);
    }
    case 6: {
      const a = getValue(ops, position + 1, op.mode1);
      const b = getValue(ops, position + 2, op.mode2);
      return handleOp(ops, a === 0 ? b : position + 3);
    }
    case 7: {
      const a = getValue(ops, position + 1, op.mode1);
      const b = getValue(ops, position + 2, op.mode2);
      ops[ops[position + 3]] = a < b ? 1 : 0;
      return handleOp(ops, position + 4);
    }    
    case 8: {
      const a = getValue(ops, position + 1, op.mode1);
      const b = getValue(ops, position + 2, op.mode2);
      ops[ops[position + 3]] = a === b ? 1 : 0;
      return handleOp(ops, position + 4);
    }
    case 99:
      return ops;
    default:
      throw new Error(`OP_CODE ${op.code} NOT SUPPORTED`);
  }
  return null;
};

(function main() {
  handleOp(input, 0);
})();
